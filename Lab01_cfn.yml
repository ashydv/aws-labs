AWSTemplateFormatVersion: 2010-09-09
Description: This template will create the Network stack for MyApplication.
Parameters:
    EnvironmentName:
        Description: 'An environment name that will be prefixed to resource names'
        Type: String
    VpcCIDR:
        Description: 'Please enter the IP range (CIDR notation) for this VPC'
        Type: String
        Default: 10.0.0.0/16
    PubSub01CIDR:
        Description: 'Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone'
        Type: String
        Default: 10.0.3.0/24
    PubSub02CIDR:
        Description: 'Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone'
        Type: String
        Default: 10.0.4.0/24
    PvtSub01CIDR:
        Description: 'Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone'
        Type: String
        Default: 10.0.1.0/24
    PvtSub02CIDR:
        Description: 'Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone'
        Type: String
        Default: 10.0.2.0/24
    NATGatewaysRequired:
        Description: Please mention do you require the two NATGateways to be installed at this stage.
        Type: String
        Default: "No"
        AllowedValues: 
            - "Yes"
            - "No"
    InstanceType:
        Description: Select the InstanceType for creation of an EC2 instance as WebServer. Default is t2.micro.
        Type: String
        Default: t2.micro
        ConstraintDescription: Must be a valid Amazon EC2 instance type.
        AllowedValues: 
          - "t2.micro"
          - "t3.micro"
    TagKey:
        Description: The EC2 tag key to identify this EC2 instance.
        Type: String
        Default: Name
        AllowedPattern: '[\x20-\x7E]*'
    TagValue:
        Description: The EC2 tag value to identify this EC2 instance.
        Type: String
        Default: MyPublicInstance
        AllowedPattern: '[\x20-\x7E]*'
    KeyPairName:
        Description: Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the instances.
        Type: AWS::EC2::KeyPair::KeyName
        ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    SSHLocation: 
        Description: "The IP address range that can be used to SSH to the EC2 instances"
        Type: String
        MinLength: '9'
        MaxLength: '18'
        Default: "0.0.0.0/0"
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    LatestAmiId:
        Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
        Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Conditions:
    isRequired:
        !Equals [!Ref NATGatewaysRequired, "Yes"]
    isntRequired:
        !Not [!Equals [!Ref NATGatewaysRequired, "No"]]
Resources:
    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: 'true'
            EnableDnsHostnames: 'true'
            Tags: 
              - Key: Name
                Value: !Join [_, [!Ref EnvironmentName, VPC]]
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, IGW]]
    InternetGatewayAttachment:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
    PubSub01:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PubSub01CIDR
            MapPublicIpOnLaunch: true
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, PubSub01]]
    PubSub02:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PubSub02CIDR
            MapPublicIpOnLaunch: true
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, PubSub02]]
    PvtSub01:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PvtSub01CIDR
            MapPublicIpOnLaunch: false
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, PvtSub01]]
    PvtSub02:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PvtSub02CIDR
            MapPublicIpOnLaunch: false
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, PvtSub02]]
    PublicRouteTable:
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId: !Ref VPC
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, PubRT]]
    DefaultPublicRoute:
        Type: 'AWS::EC2::Route'
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    PubSub01RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PubSub01
    PubSub02RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PubSub02
    NatGateway01EIP:
        Type: AWS::EC2::EIP
        Condition: isRequired
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc
    NatGateway01: 
        Type: AWS::EC2::NatGateway
        Condition: isRequired
        Properties: 
            AllocationId: !GetAtt NatGateway01EIP.AllocationId
            SubnetId: !Ref PubSub01
            Tags:
                - Key: Name
                  Value: !Join [_, [!Ref EnvironmentName, NatGateway01]]
    NatGateway02EIP:
        Type: AWS::EC2::EIP
        Condition: isRequired
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc
    NatGateway02: 
        Type: AWS::EC2::NatGateway
        Condition: isRequired
        Properties: 
            AllocationId: !GetAtt NatGateway02EIP.AllocationId
            SubnetId: !Ref PubSub02
            Tags:
                - Key: Name
                  Value: !Join [_, [!Ref EnvironmentName, NatGateway02]]
    PrivateRouteTable01:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Join [_, [!Ref EnvironmentName, PvtRTable01]]
    DefaultPrivateRoute01:
        Type: AWS::EC2::Route
        Condition: isRequired
        Properties:
            RouteTableId: !Ref PrivateRouteTable01
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway01
    PvtSub01RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable01
            SubnetId: !Ref PvtSub01
    PrivateRouteTable02:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Join [_, [!Ref EnvironmentName, PvtRTable02]]
    DefaultPrivateRoute02:
        Type: AWS::EC2::Route
        Condition: isRequired
        Properties:
            RouteTableId: !Ref PrivateRouteTable02
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway02
    PvtSub02RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable02
            SubnetId: !Ref PvtSub02
    ELBSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupName: ELBSG
            GroupDescription: 'Accepts traffic on port 80, 443 from anywhere.'
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp : 0.0.0.0/0
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                CidrIp : 0.0.0.0/0
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, ELBSG]]
    WinWebSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupName: WinWebSG
            GroupDescription: 'Accepts web traffic from ELBSG and remote access from Bastion host.'
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                SourceSecurityGroupId: !Ref ELBSG
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                SourceSecurityGroupId: !Ref ELBSG
              - IpProtocol: tcp
                FromPort: 3389
                ToPort: 3389
                SourceSecurityGroupId: !Ref WinBHSG
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, WinWebSG]]
    LnxWebSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupName: LnxWebSG
            GroupDescription: 'Accepts web traffic from ELBSG and remote access from Bastion host.'
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                SourceSecurityGroupId: !Ref ELBSG
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                SourceSecurityGroupId: !Ref ELBSG
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                SourceSecurityGroupId: !Ref WinBHSG
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                SourceSecurityGroupId: !Ref LnxBHSG
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, LnxWebSG]]      
    WinBHSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupName: WinBHSG
            GroupDescription: 'Accepts RDP traffic from anywhere.'
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 3389
                ToPort: 3389
                CidrIp: 0.0.0.0/0
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, WinBHSG]]
    LnxBHSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupName: LnxBHSG
            GroupDescription: 'Accepts RDP traffic from anywhere.'
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, LnxBHSG]]
    DBSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupName: DBSG
            GroupDescription: 'Accepts DB traffic from WebSG.'
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 3306
                ToPort: 3306
                SourceSecurityGroupId: !Ref LnxWebSG
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, DBSG]]  
    DBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties: 
            DBSubnetGroupDescription: description
            SubnetIds: 
                - !Ref PvtSub01
                - !Ref PvtSub02
            Tags: 
              - Key: Name 
                Value: !Join [_, [!Ref EnvironmentName, DBSubnetGroup]]
    EC2SSMRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument: 
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - ec2.amazonaws.com
                  Action:
                    - 'sts:AssumeRole'
            Path: /
    EC2SSMInstanceProfile:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
            Path: /
            Roles:
                - !Ref  EC2SSMRole
    EC2Instance:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: !Ref LatestAmiId
            InstanceType: !Ref InstanceType
            SubnetId: !Ref PubSub01
            IamInstanceProfile: !Ref EC2SSMInstanceProfile
            KeyName: !Ref KeyPairName
            SecurityGroupIds:
                - !GetAtt LnxWebSG.GroupId
            UserData: 
                Fn::Base64: |
                  #!/bin/bash -xe
                  sudo yum update -y
                  sudo yum install httpd mysql -y
                  sudo amazon-linux-extras install -y php7.2
                  sudo wget https://github.com/ashydv/Inventory-App/raw/master/inventory-app.zip
                  sudo unzip inventory-app.zip -d /var/www/html/
                  sudo wget https://github.com/aws/aws-sdk-php/releases/download/3.62.3/aws.zip
                  sudo unzip aws -d /var/www/html
                  sudo service httpd start
                  sudo chkconfig httpd on

            Tags: 
                - Key: Name 
                  Value: !Join [_, [!Ref EnvironmentName, WebServer]]    
Outputs:
    VPC:
        Description: 'A reference to the created VPC'
        Value: !Ref VPC
        Export:
            Name: !Sub '${AWS::StackName}-VPC'
    PubSub01:
        Description: 'A reference to the public subnet in the 1st Availability Zone'
        Value: !Ref PubSub01
        Export:
            Name: !Sub '${AWS::StackName}-PubSub01'
    PubSub02:
        Description: 'A reference to the public subnet in the 2nd Availability Zone'
        Value: !Ref PubSub02
        Export:
            Name: !Sub '${AWS::StackName}-PubSub02'
    PvtSub01:
        Description: 'A reference to the private subnet in the 1st Availability Zone'
        Value: !Ref PvtSub01
        Export:
            Name: !Sub '${AWS::StackName}-PvtSub01'
    PvtSub02:
        Description: 'A reference to the private subnet in the 2nd Availability Zone'
        Value: !Ref PvtSub02
        Export:
            Name: !Sub '${AWS::StackName}-PvtSub02'
    ELBSG:
        Description: 'Security group for the Load Balancer'
        Value: !Ref ELBSG
        Export:
            Name: !Sub '${AWS::StackName}-ELBSG'
    WinBHSG:
        Description: 'Security group for the Bastion Host'
        Value: !Ref WinBHSG
        Export:
            Name: !Sub '${AWS::StackName}-WinBHSG'
    WinWebSG:
        Description: 'Security group for the Windows instance'
        Value: !Ref WinWebSG
        Export:
            Name: !Sub '${AWS::StackName}-WinWebSG'
    LnxWebSG:
        Description: 'Security group for the Linux instance'
        Value: !Ref LnxWebSG
        Export:
            Name: !Sub '${AWS::StackName}-LnxWebSG'
